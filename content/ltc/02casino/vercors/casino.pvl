/* This code is a VerCors-PVL translation of an original 
   Solidity contract from Wolfgang Ahrendt:

     This smart contract uses simplified Solidity syntax
     and does not compile as is. The original contract was
     written by Gordon Pace, and contained also a timeout
     as a counter measure against the operator not calling
     decideBet. The current simplified version was written
     by Wolfgang Ahrendt. It deliberately introduces
     security bugs. 
*/


// I ignore rollbacks, since I only look into safety properties.
// I understand that rollbacks just changes back the state to
// the precondition of a method, with up cascade effect. I also
// understand that there cannot be an ifinit ammount of
// rollbacks. I thus replace rollback requirements to method
// requirements, and analyse only the scenario where these are 
// met.
 
// A Solidity message:
class Message {
  int sender;
  int value;
  ensures Perm(sender, 1) ** Perm(value, 1);
  Message(int i) {
    sender = i;
    value = 0;
  }
}

/*contract Casino*/

class Casino{

  // ghost balance (not in the contract)
  // updated by Solidity.
  int balance;

  int operator;

  int pot;

  // The hashed number submitted by the operator
  int hashedNumber;

  int player;

  boolean guess; // True==HEADS, False==TAILS

  int bet;

  // The state of the contract
  int state; // 0==IDLE, 1==GAME_AVAILABLE, >1 BET_PLACED

  context m != null ** Perm(m.sender, read);
  Casino (Message m) {
    operator = m.sender;
    state = 0;
    pot = 0;
    bet = 0;
    balance = 0;
  }

  // The intrinsic lock invariant holds permissions to the casino state,
  // disallowing to modify it if the intrinsic mutex of this object is not held.
  // It also defines the safety invariants we want to prove for the contract.
  // These invariants are checked at the end of the Casino constructor and
  // every time we unlock (including when [wait]ing). This invariant is assumed
  // every time we lock, and this is sound because we cannot modify the state
  // without locking (when we lock, the intrinsic lock transfers us the permissions
  // that allow us to modify the state.). 
  resource lock_invariant() = true
    ** Perm(operator,write)
    ** Perm(state,1\2)
    ** Perm(pot,1\2)
    ** Perm(bet,write)
    ** Perm(balance,write)
    ** Perm(hashedNumber,write)
    ** Perm(player, write)
    ** Perm(guess, write)
    ** balance >= 0
    ** (state <= 1 ==> bet == 0) // bet == 0 when bet not placed
    ** balance == pot + bet      // in sync with contract balance
    ** pot >= bet                // allways possible to pay the winner?
  ;

  // Permissions:
  context msg != null ** Perm(msg.sender, read) ** Perm(msg.value, read);
  context Perm(pot,1\2);
  // Functional contract:
  requires msg.value >= 0;                      // Hope this is allways the case
  void addToPot(Message msg) {
    lock this;
      payable(msg.value); // as a payable method, it changes the balance
      pot = pot + msg.value;
    unlock this;
  }

  context Perm(balance, write); 
  ensures balance == \old(balance) + amount;
  void payable(int amount);
  
  // FIXME: there is an bug in this method that breaks the invariant:
  // I update the pot after returning from the transfer. This means that
  // if the player calls us back from transfer, then the contract balance 
  // will be out of sink with our pot+bet accounting.
  //
  context Perm(pot, 1\2);
  context Perm(state, read);
  // Functional contract:
  requires amount <= pot;
  context state == 0 || state == 1; // no active bet ongoing:
  // Remove money from pot
  void removeFromPot(int amount) {
    lock this;
    // operator.transfer(amount);
    
    transfer_(operator, amount);
    unlock this;
    lock this; 
    // unlock gives up the intrinsic lock and lock waits for it to 
    // be free again. Inbetween, it allows any amount of calls to 
    // any other functions of the contract in any order. This 
    // emulates the operator (or any other process) being able to 
    // call us back in any way it wants.
    pot = pot - amount;

    unlock this;
  }
  
  
  // Abstract method encoding the effect on the balance when calling 
  // address.transfer(). This is the only effect we can be sure from 
  // this method, since it is implemented elsewere.
  context Perm(balance, write);
  ensures balance == \old(balance) - amount;
  void transfer_(int operator, int amount);

  
  // Operator opens a bet
  // Permissions:
  context Perm(state,1\2);
  context Perm(hashedNumber, 1\2);
  // Functional contract:
  requires state == 0; // require
  void createGame(int _hashedNumber) {
    lock this;
    hashedNumber = _hashedNumber;
    state = 1;
    unlock this;
  }
 

 //caller syntax: contractaddress.placeBet(HEADS).value(1000 Wei)


  // Player places a bet
  // Permissions:
  context Perm(state, 1\2);
  context Perm(pot, read);
  context msg != null ** Perm(msg.sender, read) ** Perm(msg.value, read);
  // Functional contract:
  requires (state == 1);
  requires (msg.value <= pot);
  requires (msg.value >= 0);    // Hope this is allways the case? 
  // many ensures that we are not that interested in.
  void placeBet(boolean _guess, Message msg) {
    lock this;
    payable(msg.value); // payable
    state = 2;
    player = msg.sender;
    bet = msg.value;
    guess = _guess;
    unlock this;
  }


  // FIXME same problem as in removeFromPot: I update bet only 
  // after returning from transfer_.
  // Operator resolves a bet
  // Permissions:
  context Perm(pot, 1\2);
  context Perm(state, 1\2);
  // Functional contract:
  requires state == 2;
  // many ensures we are not that interested in
  void decideBet(int secretNumber) {
    lock this;
    boolean secret = (secretNumber % 2 == 0)? true : false;
    if (secret == guess) {
      // player wins, gets back twice her bet
      pot = pot - bet;
      transfer_(player, 2*bet);
      unlock this;
      lock this;
      bet = 0;
    } else {
      // operator wins, bet transfered to pot
      pot = pot + bet;
      bet = 0;
    }
    state = 0;
    unlock this;
  }

}

