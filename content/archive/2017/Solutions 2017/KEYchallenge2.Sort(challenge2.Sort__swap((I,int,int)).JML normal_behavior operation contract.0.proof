\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Apr 22 14:31:09 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Sat Apr 22 14:31:09 CEST 2017
name=challenge2.Sort[challenge2.Sort\\:\\:swap([I,int,int)].JML normal_behavior operation contract.0
contract=challenge2.Sort[challenge2.Sort\\:\\:swap([I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mihai" ) (keyVersion "067337b5fd73cebec3e16a6bf273d10724503b43"))

(autoModeTime "1816")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "a,i,j,self,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "13") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
(builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "assignment" (formula "13") (term "1"))
(builtin "One Step Simplification" (formula "13"))
(rule "elementOfUnion" (formula "13") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "13") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "13") (term "0,0,0,0,0,1,0,1"))
(rule "array2seqDef" (formula "13") (term "1,0,1,1,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "13") (term "0,0,1,1,0,0,0,1") (inst "u=u"))
(rule "Class_invariant_axiom_for_challenge2_Sort" (formula "10") (ifseqformula "3"))
(rule "true_left" (formula "10"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_swap,savedHeapBefore_swap"))
(builtin "One Step Simplification" (formula "12"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "temp"))
(rule "assignment_array2" (formula "12") (term "1"))
(branch "Normal Execution (_a != null)"
   (builtin "One Step Simplification" (formula "13"))
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
   (rule "orRight" (formula "12"))
   (rule "eval_order_array_access3" (formula "14") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_arr"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
   (rule "assignment_array2" (formula "14") (term "1"))
   (branch "Normal Execution (_a != null)"
      (builtin "One Step Simplification" (formula "15"))
      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
      (rule "orRight" (formula "14"))
      (rule "assignment_to_primitive_array_component" (formula "16") (term "1"))
      (branch "Normal Execution (x_arr != null)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "8")) (ifInst ""  (formula "7")))
         (rule "true_left" (formula "1"))
         (rule "assignment_to_primitive_array_component" (formula "16") (term "1"))
         (branch "Normal Execution (_a != null)"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "10")) (ifInst ""  (formula "9")))
            (rule "true_left" (formula "1"))
            (rule "methodCallEmpty" (formula "16") (term "1"))
            (rule "tryEmpty" (formula "16") (term "1"))
            (rule "emptyModality" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "andRight" (formula "16") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "16") (userinteraction))
               (branch "Case 1"
                  (rule "eqSymm" (formula "16"))
                  (rule "inEqSimp_leqRight" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltRight" (formula "15"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_ltRight" (formula "14"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "closeTrue" (formula "13"))
               )
               (branch "Case 2"
                  (rule "andRight" (formula "16") (userinteraction))
                  (branch "Case 1"
                     (rule "eqSymm" (formula "16"))
                     (rule "inEqSimp_leqRight" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_ltRight" (formula "15"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_ltRight" (formula "14"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                     (rule "polySimp_elimOne" (formula "10") (term "0"))
                     (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "13"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "j = i TRUE"
                        (rule "applyEqReverse" (formula "14") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "11") (term "0,2,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "closeTrue" (formula "11"))
                     )
                     (branch "j = i FALSE"
                        (rule "close" (formula "14") (ifseqformula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "16") (userinteraction))
                     (branch "Case 1"
                        (rule "seqPermDef" (formula "16") (inst "s=s") (inst "iv=iv") (userinteraction))
                        (rule "andRight" (formula "16") (userinteraction))
                        (branch "Case 1"
                           (rule "lenOfSeqDef" (formula "16") (term "0"))
                           (rule "eqSymm" (formula "16"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                           (rule "mul_literals" (formula "16") (term "1,1,1"))
                           (rule "add_zero_right" (formula "16") (term "1,1"))
                           (rule "lenOfSeqDef" (formula "16") (term "0"))
                           (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                           (rule "times_zero_2" (formula "16") (term "1,1,0"))
                           (rule "add_zero_right" (formula "16") (term "1,0"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "closeTrue" (formula "16"))
                        )
                        (branch "Case 2"
                           (rule "exRightHide" (formula "16") (inst "t=seqDef{int u;}(Z(0(#)),
               length(a),
               \\if (u = i)
                   \\then (j)
                   \\else (\\if (u = j)
                              \\then (i)
                              \\else (u)))") (userinteraction))
                           (rule "andRight" (formula "16") (userinteraction))
                           (branch
                              (rule "andRight" (formula "16") (userinteraction))
                              (branch "Case 1"
                                 (rule "eqSymm" (formula "16"))
                                 (rule "lenOfSeqDef" (formula "16") (term "0"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                                 (rule "mul_literals" (formula "16") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "16") (term "1,1"))
                                 (rule "lenOfSeqDef" (formula "16") (term "0"))
                                 (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                                 (rule "times_zero_2" (formula "16") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "16") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "closeTrue" (formula "16"))
                              )
                              (branch "Case 2"
                                 (rule "seqNPermDefReplace" (formula "16") (inst "iv=iv") (inst "jv=jv") (userinteraction))
                                 (rule "allRight" (formula "16") (inst "sk=iv_0"))
                                 (rule "impRight" (formula "16"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "getOfSeqDef" (formula "18") (term "0,1,0"))
                                 (rule "castDel" (formula "18") (term "1,0,1,0"))
                                 (rule "castDel" (formula "18") (term "2,0,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,1,0,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0,2,1,0,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "2,2,1,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "18") (term "1,1,1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "18") (term "1,1,0,0,1,0"))
                                 (rule "lenOfSeqDef" (formula "18") (term "1,1,0,0"))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "18") (term "1,1,1,1,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
                                 (rule "lenOfSeqDef" (formula "2") (term "1"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                 (rule "times_zero_2" (formula "2") (term "1,1,1"))
                                 (rule "add_zero_right" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_leqRight" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_ltRight" (formula "16"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltRight" (formula "16"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "0,0,1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "nnf_ex2all" (formula "14"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_to_or_left2" (formula "1") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "commute_or" (formula "1") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0"))
                                 (rule "distr_forallAnd" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "commute_or" (formula "2") (term "0"))
                                 (rule "shift_paren_or" (formula "1") (term "0"))
                                 (rule "commute_or_2" (formula "1") (term "0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0"))
                                 (rule "distr_forallAnd" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "commute_or_2" (formula "3") (term "0"))
                                 (rule "shift_paren_or" (formula "2") (term "0"))
                                 (rule "commute_or_2" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_or_tautInEq0" (formula "2") (term "0,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "1,1,0,0,0"))
                                 (rule "qeq_literals" (formula "2") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0"))
                                 (rule "commute_or" (formula "2") (term "0,0,0"))
                                 (rule "shift_paren_or" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "ifthenelse_to_or_left2" (formula "1") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0"))
                                 (rule "distr_forallAnd" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "commute_or_2" (formula "2") (term "0"))
                                 (rule "shift_paren_or" (formula "1") (term "0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0,0") (ifseqformula "13"))
                                 (rule "qeq_literals" (formula "1") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "commute_or" (formula "1"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0"))
                                 (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                 (rule "ifthenelse_to_or_left2" (formula "2") (term "1,0"))
                                 (rule "eqSymm" (formula "2") (term "0,1,0,1,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0"))
                                 (rule "distr_forallAnd" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "commute_or_2" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "eqSymm" (formula "3") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "3") (term "1,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "1,1") (ifseqformula "8"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1,1"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0,1,1"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0,1,1"))
                                 (rule "add_zero_right" (formula "3") (term "0,0,1,1"))
                                 (rule "leq_literals" (formula "3") (term "0,1,1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_contradInEq1" (formula "3") (term "0,0,1") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "3") (term "0,0,0,1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "shift_paren_or" (formula "3"))
                                 (rule "commute_or" (formula "3") (term "0"))
                                 (rule "shift_paren_or" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0,0") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0,1,0,0"))
                                 (rule "leq_literals" (formula "2") (term "0,1,0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0,0") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "2") (term "0,0,0,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "commute_or_2" (formula "2"))
                                 (rule "commute_or" (formula "2") (term "0"))
                                 (rule "ifthenelse_split" (formula "8") (term "0"))
                                 (branch "a.length ≥ 1 TRUE"
                                    (rule "replace_known_left" (formula "4") (term "0,1,1,0,0") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,1") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "8"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "9"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                    (rule "leq_literals" (formula "3") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                    (rule "leq_literals" (formula "1") (term "0,1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "2"))
                                    (rule "applyEq" (formula "3") (term "1,0,1,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "14") (term "1") (ifseqformula "2"))
                                    (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "a.length ≥ 1 FALSE"
                                    (rule "replace_known_right" (formula "4") (term "0,1,1,0,0") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,1") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "inEqSimp_geqRight" (formula "16"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "1"))
                                    (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "inEqSimp_commuteLeq" (formula "2") (term "1"))
                                    (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "7"))
                                    (rule "mul_literals" (formula "7") (term "1,0"))
                                    (rule "add_zero_right" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                    (rule "mul_literals" (formula "7") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "7") (term "0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "closeFalse" (formula "7"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "16") (inst "sk=iv_0"))
                              (rule "impRight" (formula "16"))
                              (rule "andLeft" (formula "1"))
                              (rule "getOfSeqDef" (formula "18") (term "1"))
                              (rule "castDel" (formula "18") (term "2,1"))
                              (rule "castDel" (formula "18") (term "1,1"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,1"))
                              (rule "eqSymm" (formula "18"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,1,0,0"))
                              (rule "times_zero_2" (formula "18") (term "1,1,1,0,0"))
                              (rule "add_zero_right" (formula "18") (term "1,1,0,0"))
                              (rule "lenOfSeqDef" (formula "2") (term "1"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                              (rule "times_zero_2" (formula "2") (term "1,1,1"))
                              (rule "add_zero_right" (formula "2") (term "1,1"))
                              (rule "getOfSeqDef" (formula "18") (term "1"))
                              (rule "castDel" (formula "18") (term "2,1"))
                              (rule "castDel" (formula "18") (term "1,1"))
                              (rule "add_zero_right" (formula "18") (term "0,2,1,1"))
                              (rule "replace_known_left" (formula "18") (term "0,0,1") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "polySimp_elimSub" (formula "18") (term "1,0,1"))
                              (rule "times_zero_2" (formula "18") (term "1,1,0,1"))
                              (rule "add_zero_right" (formula "18") (term "1,0,1"))
                              (rule "inEqSimp_leqRight" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_ltRight" (formula "16"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "16"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "13") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "11") (term "0"))
                              (rule "getOfSeqDef" (formula "16") (term "1,0,0,0"))
                              (rule "castDel" (formula "16") (term "1,1,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,1,1,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "2,2,1,1,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,2,1,1,0,0,0"))
                              (rule "eqSymm" (formula "16") (term "0,2,1,1,0,0,0"))
                              (rule "replace_known_left" (formula "16") (term "0,0,1,0,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_elimSub" (formula "16") (term "1,0,1,0,0,0"))
                              (rule "times_zero_2" (formula "16") (term "1,1,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "1,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
                              (rule "add_zero_right" (formula "4") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                              (rule "getOfSeqDef" (formula "16") (term "0,2,1,0"))
                              (rule "castDel" (formula "16") (term "1,0,2,1,0"))
                              (rule "add_zero_right" (formula "16") (term "2,2,1,0,2,1,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,2,1,0,2,1,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,1,0,2,1,0"))
                              (rule "eqSymm" (formula "16") (term "0,2,1,0,2,1,0"))
                              (rule "replace_known_left" (formula "16") (term "0,0,0,2,1,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_elimSub" (formula "16") (term "1,0,0,2,1,0"))
                              (rule "times_zero_2" (formula "16") (term "1,1,0,0,2,1,0"))
                              (rule "add_zero_right" (formula "16") (term "1,0,0,2,1,0"))
                              (rule "getOfSeqDef" (formula "16") (term "0,1,0,0"))
                              (rule "castDel" (formula "16") (term "1,0,1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "2,2,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,2,1,0,1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,1,0,1,0,0"))
                              (rule "eqSymm" (formula "16") (term "0,2,1,0,1,0,0"))
                              (rule "replace_known_left" (formula "16") (term "0,0,0,1,0,0") (ifseqformula "3"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_elimSub" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "times_zero_2" (formula "16") (term "1,1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "3"))
                              (rule "inEqSimp_ltToLeq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "narrowSelectArrayType" (formula "16") (term "1,0") (ifseqformula "5") (ifseqformula "15"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,2,1,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,2,1,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,0,2,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,1,0,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                              (rule "mul_literals" (formula "2") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                              (rule "polySimp_elimOne" (formula "11") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,2,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,2,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,2,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0,0"))
                              (rule "pullOutSelect" (formula "14") (term "1,1") (inst "selectSK=arr_0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,0"))
                              (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "7") (ifseqformula "15"))
                              (rule "ifthenelse_split" (formula "16") (term "1,0,2,1,0"))
                              (branch "iv_0 = i TRUE"
                                 (rule "replace_known_left" (formula "17") (term "0,1,0,0,0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
                                 (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "applyEq" (formula "16") (term "1,1,0,0,1,0,0") (ifseqformula "1"))
                                 (rule "replace_known_left" (formula "16") (term "0,0,1,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0"))
                                 (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "15") (term "1,1,0,0,0,0,0") (ifseqformula "1"))
                                 (rule "replace_known_left" (formula "15") (term "0,0,0,0,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
                                 (rule "applyEq" (formula "15") (term "1,1,0,0,2,1,0") (ifseqformula "1"))
                                 (rule "replace_known_left" (formula "15") (term "0,0,2,1,0") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "applyEq" (formula "15") (term "1,1,0,1") (ifseqformula "1"))
                                 (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                 (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "a.length ≥ 1 TRUE"
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "j = i TRUE"
                                       (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "applyEq" (formula "12") (term "0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "14") (term "0,2,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "14"))
                                       (rule "closeTrue" (formula "14"))
                                    )
                                    (branch "j = i FALSE"
                                       (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "closeTrue" (formula "16"))
                                    )
                                 )
                                 (branch "a.length ≥ 1 FALSE"
                                    (rule "inEqSimp_geqRight" (formula "13"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "6") (term "0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "closeFalse" (formula "6"))
                                 )
                              )
                              (branch "iv_0 = i FALSE"
                                 (rule "replace_known_right" (formula "17") (term "0,1,0,1,0,0") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "16"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "16") (term "0,2,1,0"))
                                 (branch "a.length ≥ 1 + iv_0 TRUE"
                                    (rule "replace_known_left" (formula "17") (term "0,0,1,0,0") (ifseqformula "1"))
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "j = iv_0 TRUE"
                                       (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "17") (term "0,0,1,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "12")))
                                       (rule "orRight" (formula "17"))
                                       (rule "inEqSimp_leqRight" (formula "17"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "3"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "j = iv_0 FALSE"
                                       (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_right" (formula "17") (term "0,0,0,0,0") (ifseqformula "13"))
                                       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "4")))
                                       (rule "orRight" (formula "17"))
                                       (rule "inEqSimp_leqRight" (formula "17"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                                 (branch "a.length ≥ 1 + iv_0 FALSE"
                                    (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "16"))
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
                                    (rule "orRight" (formula "17"))
                                    (rule "notRight" (formula "17"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_geqRight" (formula "18"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                    (rule "mul_literals" (formula "5") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "mul_literals" (formula "5") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "5"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0"))
                                    (rule "add_literals" (formula "19") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "19") (term "0,0"))
                                    (rule "leq_literals" (formula "19") (term "0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "false_right" (formula "19"))
                                    (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                                    (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                    (rule "mul_literals" (formula "7") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "7") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                    (rule "polySimp_elimOne" (formula "7") (term "0"))
                                    (rule "inEqSimp_contradEq3" (formula "4") (term "0,0") (ifseqformula "7"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0,0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0,0,0,0"))
                                    (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "4") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                                    (rule "times_zero_1" (formula "2") (term "0,0"))
                                    (rule "add_zero_left" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "2"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "inEqSimp_ltRight" (formula "13"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_ltRight" (formula "14"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "9") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "11"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "Class_invariant_axiom_for_challenge2_Sort" (formula "12") (ifseqformula "5"))
                        (rule "closeTrue" (formula "12"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "16") (inst "sk=f_0"))
               (rule "allRight" (formula "16") (inst "sk=o_0"))
               (rule "orRight" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "eqSymm" (formula "19"))
               (rule "inEqSimp_ltRight" (formula "13"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_ltRight" (formula "14"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "13"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "13"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (_a = null)"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (_a != null, but _j Out of Bounds!)"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (x_arr = null)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr != null, but x Out of Bounds!)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (_a = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (_a != null, but _j Out of Bounds!)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
      (rule "commute_or" (formula "1"))
      (rule "arrayLengthIsAShort" (formula "8") (term "1"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "8") (term "1"))
      (rule "throwUnfold" (formula "16") (term "1") (inst "#v0=a"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "a_1"))
      (rule "instanceCreationAssignment" (formula "16") (term "1") (inst "#v0=a_2"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "a_2"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=a_3"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "a_3"))
      (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "__NEW__"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "16") (term "1") (inst "#v0=a_4"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "a_4"))
      (rule "allocateInstance" (formula "16"))
      (builtin "One Step Simplification" (formula "17"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "notLeft" (formula "1"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "assignment" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "assignment_write_attribute_this" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallWithinClass" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "assignment_write_attribute_this" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "assignment_write_attribute_this" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "methodCallReturnIgnoreResult" (formula "19") (term "1"))
      (rule "methodCallReturn" (formula "19") (term "1"))
      (rule "assignment" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "assignment" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallSuper" (formula "19") (term "1"))
      (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "assignment_write_attribute_this" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "assignment_write_attribute_this" (formula "19") (term "1"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "assignment_write_attribute" (formula "19") (term "1"))
      (branch "Normal Execution (a_2 != null)"
         (builtin "One Step Simplification" (formula "20"))
         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "13")))
         (rule "false_right" (formula "19"))
         (rule "assignment" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "methodCallThrow" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "tryCatchThrow" (formula "19") (term "1"))
         (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_2"))
         (rule "equality_comparison_simple" (formula "19") (term "1"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "19"))
         (rule "ifElseSplit" (formula "19"))
         (branch "if x_2 true"
            (builtin "One Step Simplification" (formula "20"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
            (builtin "One Step Simplification" (formula "20"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSplit" (formula "19"))
            (branch "if a_1 instanceof java.lang.Throwable true"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "19") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "19") (term "1"))
               (branch "Normal Execution (a_1 instanceof java.lang.Throwable)"
                  (builtin "One Step Simplification" (formula "20"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "emptyModality" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "13")))
                  (rule "false_right" (formula "19"))
                  (rule "inEqSimp_ltRight" (formula "18"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0"))
                  (rule "mul_literals" (formula "3") (term "1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                  (rule "polySimp_elimOne" (formula "12") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "11"))
                  (rule "qeq_literals" (formula "3") (term "0,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "12"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "ClassCastException (!(a_1 instanceof java.lang.Throwable))"
                  (builtin "One Step Simplification" (formula "20"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "closeTrue" (formula "19"))
               )
            )
            (branch "if a_1 instanceof java.lang.Throwable false"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (a_2 = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Null Reference (_a = null)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (_a != null, but _i Out of Bounds!)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
   (rule "commute_or" (formula "1"))
   (rule "arrayLengthIsAShort" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1"))
   (rule "throwUnfold" (formula "14") (term "1") (inst "#v0=a"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_1"))
   (rule "instanceCreationAssignment" (formula "14") (term "1") (inst "#v0=a_2"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_2"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=a_3"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_3"))
   (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=a_4"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_4"))
   (rule "allocateInstance" (formula "14"))
   (builtin "One Step Simplification" (formula "15"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "17") (term "1"))
   (rule "assignment" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "assignment_write_attribute_this" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallWithinClass" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "blockEmpty" (formula "17") (term "1"))
   (rule "assignment_write_attribute_this" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "assignment_write_attribute_this" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "blockEmpty" (formula "17") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "17") (term "1"))
   (rule "methodCallReturn" (formula "17") (term "1"))
   (rule "assignment" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "blockEmpty" (formula "17") (term "1"))
   (rule "assignment" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallSuper" (formula "17") (term "1"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "blockEmpty" (formula "17") (term "1"))
   (rule "assignment_write_attribute_this" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "assignment_write_attribute_this" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "blockEmpty" (formula "17") (term "1"))
   (rule "assignment_write_attribute" (formula "17") (term "1"))
   (branch "Normal Execution (a_2 != null)"
      (builtin "One Step Simplification" (formula "18"))
      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
      (rule "false_right" (formula "17"))
      (rule "assignment" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallThrow" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "tryCatchThrow" (formula "17") (term "1"))
      (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "17") (term "1") (newnames "x"))
      (rule "equality_comparison_simple" (formula "17") (term "1"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "13"))
      (builtin "One Step Simplification" (formula "17"))
      (rule "ifElseSplit" (formula "17"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "18"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "18"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifElseSplit" (formula "17"))
         (branch "if a_1 instanceof java.lang.Throwable true"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "17") (term "1"))
            (branch "Normal Execution (a_1 instanceof java.lang.Throwable)"
               (builtin "One Step Simplification" (formula "18"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "17") (term "1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "emptyModality" (formula "17") (term "1"))
               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
               (rule "false_right" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0"))
               (rule "polySimp_elimOne" (formula "12") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0"))
               (rule "mul_literals" (formula "2") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "8"))
               (rule "qeq_literals" (formula "2") (term "0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "10"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "ClassCastException (!(a_1 instanceof java.lang.Throwable))"
               (builtin "One Step Simplification" (formula "18"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "closeTrue" (formula "17"))
            )
         )
         (branch "if a_1 instanceof java.lang.Throwable false"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (a_2 = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
